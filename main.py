from imports import *

bot = Bot(token=TOKEN)
dp = Dispatcher()
translator = Translator()
chatbot = Chatbot(CHATGPT_CONFIG)

try:
    chatbot = Chatbot(CHATGPT_CONFIG)
    print("Chatbot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ.")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ChatGPT: {str(e)}")
    raise

class ChatGPTStates(StatesGroup):
    waiting_for_query = State()

@dp.message(lambda message: message.text == "ü§ñ –ü–æ–º–æ—â–Ω–∏–∫")
async def assistant_btn(message: types.Message, state: FSMContext):
    await message.answer("–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –¥–ª—è ChatGPT:")
    await state.set_state(ChatGPTStates.waiting_for_query)

@dp.message(ChatGPTStates.waiting_for_query)
async def handle_query(message: types.Message, state: FSMContext):
    prompt = message.text
    try:
        response = ""
        for data in chatbot.ask(prompt):
            response += data["message"]
        await message.answer(response or "ChatGPT –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç–∞.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ChatGPT: {str(e)}")
    finally:
        await state.clear()

@dp.callback_query(F.data == 'video')
async def Video(callback: CallbackQuery):
    await callback.answer('–í–∏–¥–µ–æ –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç—Å—è...', show_alert=True)
    await callback.message.edit_text('–¢—É—Ç –ø—Ä–æ—Ñ–∏–ª—å —Å –≤–∏–¥–æ—Å–æ–º!', reply_markup=await kb.test_keyboard())


# ------------------------------
@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(
        f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=kb.main
    )

# ---------- –ö–†–ò–ü–¢–ê ----------
@dp.message(F.text == "üí∞ –ö—Ä–∏–ø—Ç–∞")
async def crypto_btn(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É:", reply_markup=inline_coins)

# --- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω—ã ---
async def fetch_coin(coin_id: str):
    url = f"https://api.coingecko.com/api/v3/coins/{coin_id}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                market_data = data.get("market_data", {})
                return {
                    "price": market_data.get("current_price", {}).get("usd", 0),
                    "change": market_data.get("price_change_percentage_24h", 0)
                }
    return None

@dp.callback_query(lambda c: c.data.startswith("coin_"))
async def coin_callback(query: CallbackQuery):
    coin_id = query.data.split("_", 1)[1]
    coin = await fetch_coin(coin_id)
    ticker = COINS.get(coin_id, coin_id)
    if coin:
        text = f"üìä {ticker}-USD\nüí∞ –¶–µ–Ω–∞: {coin['price']:.2f} USD\nüìà –ò–∑–º. –∑–∞ 24—á: {coin['change']:.2f}%"
    else:
        text = f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ {ticker}"

    await query.message.answer(text)
    await query.answer()

# ---------- –ü–û–ì–û–î–ê ----------
@dp.message(F.text == "üå§ –ü–æ–≥–æ–¥–∞")
async def weather_btn(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=weather_inline)

@dp.callback_query(F.data == "weather_tomorrow")
async def weather_tomorrow(callback):
    await callback.message.edit_text("‚òÄ –ó–∞–≤—Ç—Ä–∞: —Å–æ–ª–Ω–µ—á–Ω–æ +25¬∞C")

@dp.callback_query(F.data == "weather_week")
async def weather_week(callback):
    await callback.message.edit_text("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π: ‚òÄüåß‚òÅüå§üåß")

# ---------- –¢–†–ï–ù–ò–†–û–í–ö–ê ----------
@dp.message(F.text == "üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
async def training_btn(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:", reply_markup=training_inline)

@dp.callback_query(F.data.startswith("train_"))
async def training_choice(callback):
    trainings = {
    "train_1": "üèãÔ∏è‚Äç‚ôÇÔ∏è –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ ‚Äî –ì—Ä—É–¥—å + –°–ø–∏–Ω–∞\n1. –ñ–∏–º —à—Ç–∞–Ω–≥–∏ –ª—ë–∂–∞ ‚Äî 4√ó6‚Äì8\n2. –ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –ø–æ–¥ —É–≥–ª–æ–º ‚Äî 3√ó8‚Äì10\n3. –¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –≤ –Ω–∞–∫–ª–æ–Ω–µ ‚Äî 4√ó6‚Äì8\n4. –ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è ‚Äî 3√ó–º–∞–∫—Å\n5. –ü—É–ª–æ–≤–µ—Ä ‚Äî 3√ó12",
    "train_2": "üèãÔ∏è‚Äç‚ôÇÔ∏è –°—Ä–µ–¥–∞ ‚Äî –ù–æ–≥–∏\n1. –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è ‚Äî 4√ó6‚Äì8\n2. –ñ–∏–º –Ω–æ–≥–∞–º–∏ ‚Äî 3√ó10\n3. –í—ã–ø–∞–¥—ã ‚Äî 3√ó10\n4. –†—É–º—ã–Ω—Å–∫–∞—è —Ç—è–≥–∞ ‚Äî 3√ó8‚Äì10\n5. –ü–æ–¥—ä—ë–º –Ω–∞ –Ω–æ—Å–∫–∏ ‚Äî 4√ó15‚Äì20",
    "train_3": "üèãÔ∏è‚Äç‚ôÇÔ∏è –ü—è—Ç–Ω–∏—Ü–∞ ‚Äî –ü–ª–µ—á–∏ + –†—É–∫–∏\n1. –ñ–∏–º —Å—Ç–æ—è ‚Äî 4√ó6‚Äì8\n2. –†–∞–∑–≤–µ–¥–µ–Ω–∏—è –≥–∞–Ω—Ç–µ–ª–µ–π ‚Äî 3√ó12\n3. –®—Ä–∞–≥–∏ ‚Äî 3√ó12\n4. –°–≥–∏–±–∞–Ω–∏—è —à—Ç–∞–Ω–≥–∏ ‚Äî 4√ó8\n5. –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –∂–∏–º ‚Äî 4√ó8\n6. –ú–æ–ª–æ—Ç–∫–∏ ‚Äî 3√ó10"
    }
    text = trainings.get(callback.data, "–ù–µ—Ç —Ç–∞–∫–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üò¢")
    await callback.message.edit_text(text)


@dp.message(F.text == "üé• –í–∏–¥–µ–æ")
async def video_btn(message: Message):
    video = FSInputFile('video.mp4')
    await bot.send_video(message.chat.id, video)

@dp.message(F.text == "üìÑ –î–æ–∫—É–º–µ–Ω—Ç")
async def doc_btn(message: Message):
    doc = FSInputFile('training.pdf')
    await bot.send_document(message.chat.id, doc)

@dp.message(F.text == "üéô –ì–æ–ª–æ—Å")
async def voice_btn(message: Message):
    tts = gTTS(text="–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫.", lang='ru')
    tts.save("voice.ogg")
    voice = FSInputFile("voice.ogg")
    await bot.send_audio(message.chat.id, voice)
    os.remove("voice.ogg")

from googletrans import Translator

@dp.message(F.text == "üî¢ –§–∞–∫—Ç –æ —á–∏—Å–ª–µ")
async def numfact_btn(message: Message):
    async with aiohttp.ClientSession() as session:
        async with session.get("http://numbersapi.com/random/trivia") as response:
            if response.status == 200:
                fact_en = await response.text()
                translator = Translator()
                fact_ru = translator.translate(fact_en, dest='ru').text
                await message.answer(f"üî¢ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:\n{fact_ru}")
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç üò¢")





@dp.message(F.text == "üìú –¶–∏—Ç–∞—Ç–∞")
async def quote_btn(message: Message):
    async with aiohttp.ClientSession() as session:
        async with session.get("https://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=ru") as response:
            if response.status == 200:
                data = await response.json()
                quote = data['quoteText']
                author = data['quoteAuthor'] if data['quoteAuthor'] else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä"
                await message.answer(f"üìú –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è:\n\n¬´{quote}¬ª\n‚Äî {author}")
            else:
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É.")



@dp.message(F.text == "üòÇ –®—É—Ç–∫–∞")
async def joke_btn(message: Message):
    async with aiohttp.ClientSession() as session:
        async with session.get("https://anekdotme.ru/random") as response:
            if response.status == 200:
                html = await response.text()
                # –º–∞–ª–µ–Ω—å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ (—Ç–∞–∫ –∫–∞–∫ API –≤ HTML)
                import re
                jokes = re.findall(r'<div class="anekdot_text">(.*?)</div>', html, re.S)
                if jokes:
                    joke = jokes[0].strip()
                    await message.answer(f"üòÇ –®—É—Ç–∫–∞ –¥–Ω—è:\n\n{joke}")
                else:
                    await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —à—É—Ç–∫—É üò¢")
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É üò¢")



@dp.message(F.text == "üì∑ –§–æ—Ç–æ")
async def photo_btn(message: Message):
    photos = [
        'https://shmpmgu.ru/wp-content/uploads/2023/03/6-foto-iskusstvennyj-intellekt-i-devushka-930x620.png',
        'https://cdn.lifehacker.ru/wp-content/uploads/2023/02/11111_1676301611.jpg',
        'https://i.ytimg.com/vi/oQu9Ewb0cIQ/maxresdefault.jpg',
        'https://cloud.emcr.io/files/telegram/media/5918196181060667181/5918196181060667181_y_4.jpg'
    ]
    await message.answer_photo(random.choice(photos))

@dp.message(F.text == "üåê –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç")
async def translate_btn(message: Message):
    await message.answer("–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É `/translate —Ç–µ–∫—Å—Ç`, —á—Ç–æ–±—ã –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –µ–≥–æ.")

@dp.message(Command("translate"))
async def translate_cmd(message: Message):
    text_to_translate = message.text.replace("/translate", "").strip()
    if not text_to_translate:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n/translate –ü—Ä–∏–≤–µ—Ç")
        return
    loop = asyncio.get_event_loop()
    detected = await loop.run_in_executor(None, lambda: translator.detect(text_to_translate))
    if detected.lang == 'en':
        translated = await loop.run_in_executor(None, lambda: translator.translate(text_to_translate, dest='ru'))
    else:
        translated = await loop.run_in_executor(None, lambda: translator.translate(text_to_translate, dest='en'))
    await message.answer(f"üó£ –ü–µ—Ä–µ–≤–æ–¥:\n{translated.text}")

# ------------------------------
async def main():
    await bot.delete_webhook()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
