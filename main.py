import asyncio
from aiogram.types import Message
from config import TOKEN, WEATHER_API_KEY, WEATHER_CITY
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
import random
import aiohttp
import os

bot = Bot(token=TOKEN)
dp = Dispatcher()

@dp.message(Command('weather'))
async def weather(message: Message):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={WEATHER_CITY}&appid={WEATHER_API_KEY}&units=metric&lang=ru"

    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            if response.status == 200:
                data = await response.json()
                temp = data['main']['temp']
                description = data['weather'][0]['description']
                forecast = f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {WEATHER_CITY}: {description}, {temp}¬∞C"
            else:
                forecast = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É üò¢"
    await message.answer(forecast)

@dp.message(Command('numberfact'))
async def number_fact(message: Message):
    async with aiohttp.ClientSession() as session:
        async with session.get("http://numbersapi.com/random/trivia") as response:
            if response.status ==200:
                fact = await response.text()
                await message.answer(f"{fact}")
            else:
                if response.status == 404:
                    await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç—ã –æ —Ü–∏—Ñ—Ä–∞—Ö üò¢")
                else:
                    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ üò¢")

@dp.message(Command('facts'))
async  def all_facts(message:Message):
    async with aiohttp.ClientSession() as session:
        async with session.get("https://uselessfacts.jsph.pl/api/v2/facts/random?language=en") as response:
            if response.status ==200:
                data = await response.json()
                fact = data['text']
                await message.answer(fact)
            else:
                if response.status == 404:
                    await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–∫—Ç—ã üò¢")
                else:
                    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ üò¢")


@dp.message(Command('quotable'))
async def quotable(message:Message):
    async with aiohttp.ClientSession() as session:
        async with session.get("https://zenquotes.io/api/random") as response:
                if response.status ==200:
                    data = await response.json()
                    quote = data['quote']
                    movie = data['movie']
                    await message.answer(f"üé¨ {quote}\n‚Äî {movie}")
                else:
                    if response.status == 404:
                        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É üò¢")
                    else:
                        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ üò¢")

@dp.message(Command('trivia'))
async def trivia(message: Message):
    async with aiohttp.ClientSession() as session:
        async with session.get("https://opentdb.com/api.php?amount=1&type=multiple") as response:
            if response.status ==200:
                data = await response.json()
                question = data["results"][0]["question"]
                answer = data["results"][0]["correct_answer"]
                await message.answer(f"üß† –í–æ–ø—Ä–æ—Å: {question}\n‚úÖ –û—Ç–≤–µ—Ç: {answer}")
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å-–≤–∏–∫—Ç–æ—Ä–∏–Ω—É üò¢")


@dp.message(Command("quote"))
async def send_quote(message: Message):
    async with aiohttp.ClientSession() as session:
        async with session.get("https://zenquotes.io/api/random") as response:
            if response.status == 200:
                data = await response.json()
                quote = data[0]['q']
                author = data[0]['a']
                await message.answer(f"üí¨ {quote}\n‚Äî {author}")
            else:
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É.")


@dp.message(Command('joke'))
async def send_joke(message:Message):
    async with aiohttp.ClientSession() as session:
        async with session.get("https://official-joke-api.appspot.com/jokes/random") as response:
            if response ==200:
                data = await response.json()
                joke = f"üòÇ {data['setup']} \n {data['punchline']}"
            else:
                if response.status == 404:
                    joke = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É üò¢"
                else:
                    joke = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ üò¢"


@dp.message(Command('meme'))
async def meme(message:Message):
    async with aiohttp.ClientSession() as session:
        async with session.get("https://api.imgflip.com/get_memes") as response:
            if response.status ==200:
                data  = await response.json()
                await message.answer_photo(photo=data['url'], caption=data['title'])
            else:
                if response.status == 404:
                    await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ–º üò¢")
                else:
                    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ üò¢")


@dp.message(Command('photo'))
async def answ_photo(message: Message):
    list = ['https://shmpmgu.ru/wp-content/uploads/2023/03/6-foto-iskusstvennyj-intellekt-i-devushka-930x620.png',
            'https://cdn.lifehacker.ru/wp-content/uploads/2023/02/11111_1676301611.jpg',
            'https://i.ytimg.com/vi/oQu9Ewb0cIQ/maxresdefault.jpg',
            'https://cloud.emcr.io/files/telegram/media/5918196181060667181/5918196181060667181_y_4.jpg']
    rand_photo = random.choice(list)
    await message.answer_photo(photo=rand_photo, caption='–≠—Ç–æ —Ñ–æ—Ç–æ, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å—É–ø–µ—Ä –ò–ò')

@dp.message(Command('help'))
async def help(message: Message):
    await message.answer('—ç—Ç–æ—Ç –±–æ—Ç —É–º–µ–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã:\n /start \n /help \n /photo \n /weather \n /numberfact \n '
                         '/quote \n /meme \n /trivia \n ')

@dp.message(Command('movie'))
async def random_movie(message:Message):
    async with aiohttp.ClientSession() as session:
        async with session.get("https://fake-movie-database-api.herokuapp.com/api?s=random") as response:
            if response ==200:
                data = await response.json()
                movie = random.choice(data['series'])
                title = data['title']
                year = data['year']
                poster = data['poster']

                await message.answer_photo(photo=poster, caption=f"üé¨ {title} ({year})")
            else:
                if response.status == 404:
                    await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–ª—å–º üò¢")
                else:
                    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ üò¢")


@dp.message(F.photo)
async def react_photo(message: Message):
    list = ['–∫–ª–∞—Å—Å–Ω–∞—è —Ñ–æ—Ç–∫–∞', '—Ñ–æ—Ç–æ —Ç–∞–∫ —Å–µ–±–µ', '–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π –±–æ–ª—å—à–µ —Ç–∞–∫–æ–µ —Ñ–æ—Ç–æ']
    rand_answer = random.choice(list)
    await message.answer(rand_answer)


@dp.message(F.text == '–ß—Ç–æ —Ç–∞–∫–æ–µ –ò–ò?')
async def ai_text(message: Message):
    await message.answer('–≠—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç. –≠—Ç–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞, –∫–æ—Ç–æ—Ä–∞—è —Å–ø–æ—Å–æ–±–Ω–∞ –æ–±—É—á–∞—Ç—å—Å—è –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏, '
                         '–Ω–µ –∏–º–µ—è –Ω–∏–∫–∞–∫–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞.')


@dp.message(CommandStart())
async def start(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥—ã. \n')

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
