import asyncio
from aiogram.types import Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from config import TOKEN
import random
import aiohttp
from datetime import datetime
import os
from gtts import gTTS
from googletrans import Translator
import keyboards as kb
from keyboards import weather_inline, training_inline

bot = Bot(token=TOKEN)
dp = Dispatcher()

#–ó–∞–¥–∞–Ω–∏–µ 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
#–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã /start –±–æ—Ç –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ü—Ä–∏–≤–µ—Ç" –∏ "–ü–æ–∫–∞". –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–≤–µ—Ç" –±–æ—Ç –¥–æ–ª–∂–µ–Ω
# –æ—Ç–≤–µ—á–∞—Ç—å "–ü—Ä–∏–≤–µ—Ç, {–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è}!", –∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞" –±–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è}!".

@dp.message(Command("start"))
async def start(message: Message):
    builder = ReplyKeyboardBuilder()
    builder.button(text="–ü—Ä–∏–≤–µ—Ç")
    builder.button(text="–ü–æ–∫–∞")
    builder.adjust(2)  # –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )


@dp.message(Command("links"))
async def links(message: Message):
    await message.answer("üîó –°—Å—ã–ª–∫–∏:", reply_markup=kb.inline_hw)


@dp.message(F.text.in_(["–ü—Ä–∏–≤–µ—Ç", "–ü–æ–∫–∞"]))
async def handle_buttons(message: Message):
    if message.text == "–ü—Ä–∏–≤–µ—Ç":
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!")
    elif message.text == "–ü–æ–∫–∞":
        await message.answer(f"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {message.from_user.full_name}!")


# –ö–Ω–æ–ø–∫–∞ "–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ"
show_more_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ", callback_data="dynamic")]
    ]
)

# –î–≤–µ –∫–Ω–æ–ø–∫–∏ "–û–ø—Ü–∏—è 1" –∏ "–û–ø—Ü–∏—è 2"
options_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–û–ø—Ü–∏—è 1", callback_data="option_1")],
        [InlineKeyboardButton(text="–û–ø—Ü–∏—è 2", callback_data="option_2")]
    ]
)

# –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /dynamic
@dp.message(Command("dynamic"))
async def cmd_dynamic(message: Message):
    await message.answer("–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=show_more_kb)

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ"
@dp.callback_query(F.data == "dynamic")
async def show_options(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é:", reply_markup=options_kb)

# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –æ–ø—Ü–∏–π
@dp.callback_query(F.data.in_(["option_1", "option_2"]))
async def option_selected(callback: CallbackQuery):
    if callback.data == "option_1":
        await callback.message.answer("–¢—ã –≤—ã–±—Ä–∞–ª: –û–ø—Ü–∏—è 1")
    elif callback.data == "option_2":
        await callback.message.answer("–¢—ã –≤—ã–±—Ä–∞–ª: –û–ø—Ü–∏—è 2")
    await callback.answer()  # —É–±–∏—Ä–∞–µ—Ç "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ




async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
